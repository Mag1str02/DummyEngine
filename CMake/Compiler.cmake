set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fPIC -fno-omit-frame-pointer")
set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -fPIC -fno-omit-frame-pointer")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../Sandbox)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../Sandbox)

# Precompiled headers and libc++
set(ENABLE_PRECOMPILED_HEADERS OFF)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    set(ENABLE_PRECOMPILED_HEADERS ON)
endif()
message(STATUS "CMAKE_CXX_COMPILER_ID: [${CMAKE_CXX_COMPILER_ID}]")
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(DE_USE_GNU ON)
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++20")
    set(ENABLE_PRECOMPILED_HEADERS ON)
endif()
if (${DE_FORCE_NO_PCH}) 
    set(ENABLE_PRECOMPILED_HEADERS OFF)
endif()

# Clang Tidy
if(DE_CLANG_TIDY_RUN_ON_COMPILATION)
    find_program(CLANG_TIDY_EXE NAMES "clang-tidy" "clang-tidy-17" "clang-tidy-18" "clang-tidy-19" REQUIRED)
    set(CLANG_TIDY_COMMAND "${CLANG_TIDY_EXE}" "-p" "${CMAKE_CURRENT_SOURCE_DIR}/build")
    if (DE_CLANG_TIDY_WARNINGS_AS_ERRORS)
        set(CLANG_TIDY_COMMAND ${CLANG_TIDY_COMMAND} "--warnings-as-errors=*")
    endif()
    message(STATUS "CLANG_TIDY_COMMAND: [${CLANG_TIDY_COMMAND}]")
endif()

# Sanitizers https://clang.llvm.org/docs/UsersManual.html#controlling-code-generation
if (DE_ENABLE_ASAN AND DE_ENABLE_TSAN)
    message(FATAL_ERROR "ASAN and TSAN cannot be used simultaneously")
endif()
if (DE_ENABLE_ASAN AND DE_ENABLE_MSAN)
    message(FATAL_ERROR "ASAN and MSAN cannot be used simultaneously")
endif()
if (DE_ENABLE_TSAN AND DE_ENABLE_MSAN)
    message(FATAL_ERROR "TSAN and MSAN cannot be used simultaneously")
endif()
if (DE_ENABLE_UBSAN)
    add_compile_options(-fsanitize=undefined)
    add_link_options(-fsanitize=undefined)
endif()
if (DE_ENABLE_ASAN)
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
endif()
if (DE_ENABLE_TSAN)
    if (DE_PLATFORM STREQUAL "WINDOWS")
        message(FATAL_ERROR "Cannot use TSAN on Windows")
    endif()
    add_compile_options(-fsanitize=thread)
    add_link_options(-fsanitize=thread)
endif()
if (DE_ENABLE_MSAN)
    if (DE_PLATFORM STREQUAL "WINDOWS")
        message(FATAL_ERROR "Cannot use MSAN on Windows")
    endif()
    add_compile_options(-fsanitize=memory)
    add_link_options(-fsanitize=memory)
endif()

# Warnings
function(add_warnings TARGET)
    target_compile_options(${TARGET} PUBLIC -Wall -Wextra -Wpedantic -Wno-extra-semi -Wno-missing-field-initializers -Werror -Wno-changes-meaning)
    if (ENABLE_PRECOMPILED_HEADERS)
        target_compile_options(${TARGET} PUBLIC -Winvalid-pch)
    endif()
endfunction(add_warnings)